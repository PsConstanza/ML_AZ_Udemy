setwd("C:/Users/Ckonny/Desktop/ML/Sección08_DeepLearning/Artificial Neural Networks (ANN)")
# Importar el dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
View(dataset)
View(dataset)
# Codificar los factores para la RNA
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France','Spain','Germany'), labels = c(1,2,3)))
dataset = dataset[, 4:14]
# Importar el dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Codificar los factores para la RNA
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France','Spain','Germany'), labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c('Female','Male'), labels = c(1,2)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
training_set[, -11] = scale(training_set[, -11])
testing_set[, -11] = scale(testing_set[, -11])
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
# Crear la Red Neuronal con el conjunto de datos
install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame = training_set)
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set))
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = 10)
y_pred = ifelse(prob_pred>0.5, 1, 0)
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = testing_set[,-11])
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11])
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier, newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred>0.5, 1, 0)
y_pred = (prob_pred>0.5 )
y_pred = as.vector(y_pred)
y_pred
# Crear la matriz de confusión
cm = table(testing_set[,11], y_pred)
cm
(1541+189)/2000
# Cerrar sesión de H2O
h2o.shutdown()
