family = binomial)
# Predicción de los resultados con el conjunto de testing
prob_pred = predict(classifier, type = 'response',
newdata = testing_set[,-692])
y_pred = ifelse(prob_pred>0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de datos
# install.packages('class')
library(class)
y_pred = knn(train = training_set[,-692],
test = testing_set[,-692],
cl = training_set[,692],
k = 5)
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el SVM con el conjunto de datos
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el kernel SVM con el conjunto de datos
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el Naive Bayes con el conjunto de datos
# install.packages('e1071')
library(e1071)
classifier = naiveBayes( x = training_set[,-692],
y = training_set$Liked)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de árbol de decisión con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# 08 Cart
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.01))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# 08 Cart
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.01))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.02))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Dividir los datos en conjunto de entrenamiento y conjunto de testing
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.001))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.005))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.01))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.05))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.001))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.01))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
control = rpart.control(cp = 0.001))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de CART con el conjunto de datos
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set,
method = 'class',
control = rpart.control(cp = 0.01))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Ajustar el clasificador de CART con el conjunto de datos
install.packages('c50')
library(c50)
# Ajustar el clasificador de CART con el conjunto de datos
install.packages('C50')
library(C50)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de C5.0 con el conjunto de datos
install.packages('C50')
library(C50)
classifier = C50(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 75))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Ajustar el clasificador de C5.0 con el conjunto de datos
install.packages('C50')
install.packages("C50")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de C5.0 con el conjunto de datos
# install.packages('C50')
library(C50)
classifier = C50(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 75))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de C5.0 con el conjunto de datos
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 75))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE )
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador de C5.0 con el conjunto de datos
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 75))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Ajustar el clasificador de C5.0 con el conjunto de datos
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 100))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 1))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 75))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 750))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 80))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 40))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 30))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
control = C5.0Control(minCases = 20))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
trials = 10)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages('C50')
library(C50)
classifier = C5.0(formula = Liked ~ .,
data = training_set,
trials = 10)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Ajustar el clasificador de max ent con el conjunto de datos
install.packages('maxent')
# Ajustar el clasificador de max ent con el conjunto de datos
# install.packages('maxent')
library(maxent)
# Ajustar el clasificador de max ent con el conjunto de datos
install.packages('maxent')
install.packages("maxent", dependencies = TRUE)
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
# Ajustar el clasificador de max ent con el conjunto de datos
install.packages("nnet")
library(nnet)
classifier = multinom(formula = Liked ~ .,
data = training_set,
MaxNWts = 5000)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
View(dataset)
View(dataset)
# install.packages("nnet")
library(nnet)
classifier = multinom(formula = Liked ~ .,
data = training_set,
MaxNWts = 1000)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
library(nnet)
classifier = multinom(formula = Liked ~ .,
data = training_set,
MaxNWts = 500)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# Ajustar el clasificador de max ent con el conjunto de datos
# install.packages("nnet")
library(nnet)
classifier = multinom(formula = Liked ~ .,
data = training_set,
MaxNWts = 693)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
# install.packages("nnet")
library(nnet)
classifier = multinom(formula = Liked ~ .,
data = training_set,
MaxNWts = 1000)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = 'class')
# Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
